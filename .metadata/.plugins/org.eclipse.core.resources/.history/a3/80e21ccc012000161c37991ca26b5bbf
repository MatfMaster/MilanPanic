package milan.panic.master.traditional;

import milan.panic.master.common.ReturnType;
import milan.panic.master.common.SomeInterface; 
import milan.panic.master.common.ExampleClass;
 
/** Definicija aspekta */
public aspect SimpleAspect {
	/** Definicija taÄ?ke preseka */
	pointcut PointcutName() : execution(* ExampleClass.*(..));

	/**
	 * Definicija saveta - jedne od najvaÅ¾nijih konstrukcija koje dodaje ili
	 * menja ponaÅ¡anje u taÄ?kama preseka. MoguÄ‡i tipovi saveta su:
	 */
	before() : PointcutName() {
		/** Telo saveta se izvrÅ¡ava pre taÄ?ke preseka. */
	}
	after() returning: PointcutName(){
		/**
		 * Telo saveta se izvrÅ¡ava nakon izvrÅ¡enja koda koji je definisan taÄ?kom
		 * preseka, ali samo ukoliko se nije dogodio izuzetak.
		 */
	}
	after() throwing: PointcutName(){
		/**
		 * Telo saveta se izvrÅ¡ava nakon izvrÅ¡enja koda koji je definisan taÄ?kom
		 * preseka, ali samo ukoliko se dogodio izuzetak.
		 */
	}
	after(): PointcutName() {
		/**
		 * Telo saveta se izvrÅ¡ava nakon izvrÅ¡enja koda koji je definisan taÄ?kom
		 * preseka. Objedinjuje after returning i after throwing savet.
		 */
	}
//	ReturnType around() : PointcutName(){
//		/**
//		 * Savet koji potpuno okruÅ¾uje taÄ?ku preseka i daje moguÄ‡nost izvrÅ¡enja
//		 * proizvoljnog koda oko taÄ?ke preseka. Savet around() ima i povratnu
//		 * vrednost koja predstavlja povratnu vrednost koda taÄ?ke preseka koji
//		 * je uÄ?auren. Kod taÄ?ke preseka se, ukoliko se to Å¾eli, izvrÅ¡ava
//		 * pozivanjem specijalne funkcije proceed().
//		 */
//		return proceed();
//	}
	declare precedence: Aspect1, Aspect2;
	/** Definicija konstrukcija koje menjaju statiÄ?ku strukturu programa: */
	/** 1.Dodavanje definicije interfejsa klasi */
	//declare parents: SomeClass implements SomeInterface;
	/** 2.Dodavanje atributa klasi */
//	private long SomeClass.additionalAttribute;
	/** 3.Dodavanje metoda klasi */
//	public ReturnType SomeClass.additionalMethod() {
//		return null;
//	}
}
